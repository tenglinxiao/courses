/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.whiteelephant.analysis;  
@SuppressWarnings("all")
public class AttemptStatsKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AttemptStatsKey\",\"namespace\":\"com.linkedin.whiteelephant.analysis\",\"fields\":[{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"long\"},{\"name\":\"unit\",\"type\":{\"type\":\"enum\",\"name\":\"TimeUnit\",\"symbols\":[\"HOURS\"]}},{\"name\":\"cluster\",\"type\":\"string\"},{\"name\":\"excess\",\"type\":\"boolean\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"TaskType\",\"symbols\":[\"MAP\",\"REDUCE\"]}},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"TaskStatus\",\"symbols\":[\"SUCCESS\",\"FAILED\",\"KILLED\"]}}]}");
  @Deprecated public java.lang.CharSequence user;
  @Deprecated public long time;
  @Deprecated public com.linkedin.whiteelephant.analysis.TimeUnit unit;
  @Deprecated public java.lang.CharSequence cluster;
  @Deprecated public boolean excess;
  @Deprecated public com.linkedin.whiteelephant.analysis.TaskType type;
  @Deprecated public com.linkedin.whiteelephant.analysis.TaskStatus status;

  /**
   * Default constructor.
   */
  public AttemptStatsKey() {}

  /**
   * All-args constructor.
   */
  public AttemptStatsKey(java.lang.CharSequence user, java.lang.Long time, com.linkedin.whiteelephant.analysis.TimeUnit unit, java.lang.CharSequence cluster, java.lang.Boolean excess, com.linkedin.whiteelephant.analysis.TaskType type, com.linkedin.whiteelephant.analysis.TaskStatus status) {
    this.user = user;
    this.time = time;
    this.unit = unit;
    this.cluster = cluster;
    this.excess = excess;
    this.type = type;
    this.status = status;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user;
    case 1: return time;
    case 2: return unit;
    case 3: return cluster;
    case 4: return excess;
    case 5: return type;
    case 6: return status;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user = (java.lang.CharSequence)value$; break;
    case 1: time = (java.lang.Long)value$; break;
    case 2: unit = (com.linkedin.whiteelephant.analysis.TimeUnit)value$; break;
    case 3: cluster = (java.lang.CharSequence)value$; break;
    case 4: excess = (java.lang.Boolean)value$; break;
    case 5: type = (com.linkedin.whiteelephant.analysis.TaskType)value$; break;
    case 6: status = (com.linkedin.whiteelephant.analysis.TaskStatus)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user' field.
   */
  public java.lang.CharSequence getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(java.lang.CharSequence value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'unit' field.
   */
  public com.linkedin.whiteelephant.analysis.TimeUnit getUnit() {
    return unit;
  }

  /**
   * Sets the value of the 'unit' field.
   * @param value the value to set.
   */
  public void setUnit(com.linkedin.whiteelephant.analysis.TimeUnit value) {
    this.unit = value;
  }

  /**
   * Gets the value of the 'cluster' field.
   */
  public java.lang.CharSequence getCluster() {
    return cluster;
  }

  /**
   * Sets the value of the 'cluster' field.
   * @param value the value to set.
   */
  public void setCluster(java.lang.CharSequence value) {
    this.cluster = value;
  }

  /**
   * Gets the value of the 'excess' field.
   */
  public java.lang.Boolean getExcess() {
    return excess;
  }

  /**
   * Sets the value of the 'excess' field.
   * @param value the value to set.
   */
  public void setExcess(java.lang.Boolean value) {
    this.excess = value;
  }

  /**
   * Gets the value of the 'type' field.
   */
  public com.linkedin.whiteelephant.analysis.TaskType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(com.linkedin.whiteelephant.analysis.TaskType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'status' field.
   */
  public com.linkedin.whiteelephant.analysis.TaskStatus getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(com.linkedin.whiteelephant.analysis.TaskStatus value) {
    this.status = value;
  }

  /** Creates a new AttemptStatsKey RecordBuilder */
  public static com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder newBuilder() {
    return new com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder();
  }
  
  /** Creates a new AttemptStatsKey RecordBuilder by copying an existing Builder */
  public static com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder newBuilder(com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder other) {
    return new com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder(other);
  }
  
  /** Creates a new AttemptStatsKey RecordBuilder by copying an existing AttemptStatsKey instance */
  public static com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder newBuilder(com.linkedin.whiteelephant.analysis.AttemptStatsKey other) {
    return new com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder(other);
  }
  
  /**
   * RecordBuilder for AttemptStatsKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AttemptStatsKey>
    implements org.apache.avro.data.RecordBuilder<AttemptStatsKey> {

    private java.lang.CharSequence user;
    private long time;
    private com.linkedin.whiteelephant.analysis.TimeUnit unit;
    private java.lang.CharSequence cluster;
    private boolean excess;
    private com.linkedin.whiteelephant.analysis.TaskType type;
    private com.linkedin.whiteelephant.analysis.TaskStatus status;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.whiteelephant.analysis.AttemptStatsKey.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing AttemptStatsKey instance */
    private Builder(com.linkedin.whiteelephant.analysis.AttemptStatsKey other) {
            super(com.linkedin.whiteelephant.analysis.AttemptStatsKey.SCHEMA$);
      if (isValidValue(fields()[0], other.user)) {
        this.user = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.user);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = (java.lang.Long) data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unit)) {
        this.unit = (com.linkedin.whiteelephant.analysis.TimeUnit) data().deepCopy(fields()[2].schema(), other.unit);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cluster)) {
        this.cluster = (java.lang.CharSequence) data().deepCopy(fields()[3].schema(), other.cluster);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.excess)) {
        this.excess = (java.lang.Boolean) data().deepCopy(fields()[4].schema(), other.excess);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = (com.linkedin.whiteelephant.analysis.TaskType) data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = (com.linkedin.whiteelephant.analysis.TaskStatus) data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'user' field */
    public java.lang.CharSequence getUser() {
      return user;
    }
    
    /** Sets the value of the 'user' field */
    public com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder setUser(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.user = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'user' field has been set */
    public boolean hasUser() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'user' field */
    public com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder clearUser() {
      user = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'time' field */
    public java.lang.Long getTime() {
      return time;
    }
    
    /** Sets the value of the 'time' field */
    public com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder setTime(long value) {
      validate(fields()[1], value);
      this.time = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'time' field has been set */
    public boolean hasTime() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'time' field */
    public com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder clearTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'unit' field */
    public com.linkedin.whiteelephant.analysis.TimeUnit getUnit() {
      return unit;
    }
    
    /** Sets the value of the 'unit' field */
    public com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder setUnit(com.linkedin.whiteelephant.analysis.TimeUnit value) {
      validate(fields()[2], value);
      this.unit = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'unit' field has been set */
    public boolean hasUnit() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'unit' field */
    public com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder clearUnit() {
      unit = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'cluster' field */
    public java.lang.CharSequence getCluster() {
      return cluster;
    }
    
    /** Sets the value of the 'cluster' field */
    public com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder setCluster(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.cluster = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'cluster' field has been set */
    public boolean hasCluster() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'cluster' field */
    public com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder clearCluster() {
      cluster = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'excess' field */
    public java.lang.Boolean getExcess() {
      return excess;
    }
    
    /** Sets the value of the 'excess' field */
    public com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder setExcess(boolean value) {
      validate(fields()[4], value);
      this.excess = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'excess' field has been set */
    public boolean hasExcess() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'excess' field */
    public com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder clearExcess() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public com.linkedin.whiteelephant.analysis.TaskType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder setType(com.linkedin.whiteelephant.analysis.TaskType value) {
      validate(fields()[5], value);
      this.type = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'type' field */
    public com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder clearType() {
      type = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'status' field */
    public com.linkedin.whiteelephant.analysis.TaskStatus getStatus() {
      return status;
    }
    
    /** Sets the value of the 'status' field */
    public com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder setStatus(com.linkedin.whiteelephant.analysis.TaskStatus value) {
      validate(fields()[6], value);
      this.status = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'status' field has been set */
    public boolean hasStatus() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'status' field */
    public com.linkedin.whiteelephant.analysis.AttemptStatsKey.Builder clearStatus() {
      status = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public AttemptStatsKey build() {
      try {
        AttemptStatsKey record = new AttemptStatsKey();
        record.user = fieldSetFlags()[0] ? this.user : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.time = fieldSetFlags()[1] ? this.time : (java.lang.Long) defaultValue(fields()[1]);
        record.unit = fieldSetFlags()[2] ? this.unit : (com.linkedin.whiteelephant.analysis.TimeUnit) defaultValue(fields()[2]);
        record.cluster = fieldSetFlags()[3] ? this.cluster : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.excess = fieldSetFlags()[4] ? this.excess : (java.lang.Boolean) defaultValue(fields()[4]);
        record.type = fieldSetFlags()[5] ? this.type : (com.linkedin.whiteelephant.analysis.TaskType) defaultValue(fields()[5]);
        record.status = fieldSetFlags()[6] ? this.status : (com.linkedin.whiteelephant.analysis.TaskStatus) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
