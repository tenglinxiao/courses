/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.whiteelephant.parsing;  
@SuppressWarnings("all")
public class JobConf extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"JobConf\",\"namespace\":\"com.linkedin.whiteelephant.parsing\",\"fields\":[{\"name\":\"path\",\"type\":[\"null\",\"string\"]},{\"name\":\"cluster\",\"type\":[\"null\",\"string\"]},{\"name\":\"jobId\",\"type\":\"string\"},{\"name\":\"configuration\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  @Deprecated public java.lang.CharSequence path;
  @Deprecated public java.lang.CharSequence cluster;
  @Deprecated public java.lang.CharSequence jobId;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> configuration;

  /**
   * Default constructor.
   */
  public JobConf() {}

  /**
   * All-args constructor.
   */
  public JobConf(java.lang.CharSequence path, java.lang.CharSequence cluster, java.lang.CharSequence jobId, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> configuration) {
    this.path = path;
    this.cluster = cluster;
    this.jobId = jobId;
    this.configuration = configuration;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return path;
    case 1: return cluster;
    case 2: return jobId;
    case 3: return configuration;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: path = (java.lang.CharSequence)value$; break;
    case 1: cluster = (java.lang.CharSequence)value$; break;
    case 2: jobId = (java.lang.CharSequence)value$; break;
    case 3: configuration = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'path' field.
   */
  public java.lang.CharSequence getPath() {
    return path;
  }

  /**
   * Sets the value of the 'path' field.
   * @param value the value to set.
   */
  public void setPath(java.lang.CharSequence value) {
    this.path = value;
  }

  /**
   * Gets the value of the 'cluster' field.
   */
  public java.lang.CharSequence getCluster() {
    return cluster;
  }

  /**
   * Sets the value of the 'cluster' field.
   * @param value the value to set.
   */
  public void setCluster(java.lang.CharSequence value) {
    this.cluster = value;
  }

  /**
   * Gets the value of the 'jobId' field.
   */
  public java.lang.CharSequence getJobId() {
    return jobId;
  }

  /**
   * Sets the value of the 'jobId' field.
   * @param value the value to set.
   */
  public void setJobId(java.lang.CharSequence value) {
    this.jobId = value;
  }

  /**
   * Gets the value of the 'configuration' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getConfiguration() {
    return configuration;
  }

  /**
   * Sets the value of the 'configuration' field.
   * @param value the value to set.
   */
  public void setConfiguration(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.configuration = value;
  }

  /** Creates a new JobConf RecordBuilder */
  public static com.linkedin.whiteelephant.parsing.JobConf.Builder newBuilder() {
    return new com.linkedin.whiteelephant.parsing.JobConf.Builder();
  }
  
  /** Creates a new JobConf RecordBuilder by copying an existing Builder */
  public static com.linkedin.whiteelephant.parsing.JobConf.Builder newBuilder(com.linkedin.whiteelephant.parsing.JobConf.Builder other) {
    return new com.linkedin.whiteelephant.parsing.JobConf.Builder(other);
  }
  
  /** Creates a new JobConf RecordBuilder by copying an existing JobConf instance */
  public static com.linkedin.whiteelephant.parsing.JobConf.Builder newBuilder(com.linkedin.whiteelephant.parsing.JobConf other) {
    return new com.linkedin.whiteelephant.parsing.JobConf.Builder(other);
  }
  
  /**
   * RecordBuilder for JobConf instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<JobConf>
    implements org.apache.avro.data.RecordBuilder<JobConf> {

    private java.lang.CharSequence path;
    private java.lang.CharSequence cluster;
    private java.lang.CharSequence jobId;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> configuration;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.whiteelephant.parsing.JobConf.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.whiteelephant.parsing.JobConf.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing JobConf instance */
    private Builder(com.linkedin.whiteelephant.parsing.JobConf other) {
            super(com.linkedin.whiteelephant.parsing.JobConf.SCHEMA$);
      if (isValidValue(fields()[0], other.path)) {
        this.path = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.path);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cluster)) {
        this.cluster = (java.lang.CharSequence) data().deepCopy(fields()[1].schema(), other.cluster);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.jobId)) {
        this.jobId = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.jobId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.configuration)) {
        this.configuration = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) data().deepCopy(fields()[3].schema(), other.configuration);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'path' field */
    public java.lang.CharSequence getPath() {
      return path;
    }
    
    /** Sets the value of the 'path' field */
    public com.linkedin.whiteelephant.parsing.JobConf.Builder setPath(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.path = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'path' field has been set */
    public boolean hasPath() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'path' field */
    public com.linkedin.whiteelephant.parsing.JobConf.Builder clearPath() {
      path = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'cluster' field */
    public java.lang.CharSequence getCluster() {
      return cluster;
    }
    
    /** Sets the value of the 'cluster' field */
    public com.linkedin.whiteelephant.parsing.JobConf.Builder setCluster(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.cluster = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'cluster' field has been set */
    public boolean hasCluster() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'cluster' field */
    public com.linkedin.whiteelephant.parsing.JobConf.Builder clearCluster() {
      cluster = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'jobId' field */
    public java.lang.CharSequence getJobId() {
      return jobId;
    }
    
    /** Sets the value of the 'jobId' field */
    public com.linkedin.whiteelephant.parsing.JobConf.Builder setJobId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.jobId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'jobId' field has been set */
    public boolean hasJobId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'jobId' field */
    public com.linkedin.whiteelephant.parsing.JobConf.Builder clearJobId() {
      jobId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'configuration' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getConfiguration() {
      return configuration;
    }
    
    /** Sets the value of the 'configuration' field */
    public com.linkedin.whiteelephant.parsing.JobConf.Builder setConfiguration(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.configuration = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'configuration' field has been set */
    public boolean hasConfiguration() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'configuration' field */
    public com.linkedin.whiteelephant.parsing.JobConf.Builder clearConfiguration() {
      configuration = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public JobConf build() {
      try {
        JobConf record = new JobConf();
        record.path = fieldSetFlags()[0] ? this.path : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.cluster = fieldSetFlags()[1] ? this.cluster : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.jobId = fieldSetFlags()[2] ? this.jobId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.configuration = fieldSetFlags()[3] ? this.configuration : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
